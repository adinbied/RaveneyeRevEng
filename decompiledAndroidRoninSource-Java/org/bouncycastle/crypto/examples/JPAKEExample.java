package org.bouncycastle.crypto.examples;

import java.io.PrintStream;
import java.math.BigInteger;
import java.security.SecureRandom;
import org.bouncycastle.crypto.CryptoException;
import org.bouncycastle.crypto.Digest;
import org.bouncycastle.crypto.agreement.jpake.JPAKEParticipant;
import org.bouncycastle.crypto.agreement.jpake.JPAKEPrimeOrderGroup;
import org.bouncycastle.crypto.agreement.jpake.JPAKEPrimeOrderGroups;
import org.bouncycastle.crypto.agreement.jpake.JPAKERound1Payload;
import org.bouncycastle.crypto.agreement.jpake.JPAKERound2Payload;
import org.bouncycastle.crypto.agreement.jpake.JPAKERound3Payload;
import org.bouncycastle.crypto.digests.SHA256Digest;

public class JPAKEExample
{
  private static BigInteger deriveSessionKey(BigInteger paramBigInteger)
  {
    SHA256Digest localSHA256Digest = new SHA256Digest();
    paramBigInteger = paramBigInteger.toByteArray();
    byte[] arrayOfByte = new byte[localSHA256Digest.getDigestSize()];
    localSHA256Digest.update(paramBigInteger, 0, paramBigInteger.length);
    localSHA256Digest.doFinal(arrayOfByte, 0);
    return new BigInteger(arrayOfByte);
  }
  
  public static void main(String[] paramArrayOfString)
    throws CryptoException
  {
    Object localObject1 = JPAKEPrimeOrderGroups.NIST_3072;
    paramArrayOfString = ((JPAKEPrimeOrderGroup)localObject1).getP();
    Object localObject2 = ((JPAKEPrimeOrderGroup)localObject1).getQ();
    Object localObject3 = ((JPAKEPrimeOrderGroup)localObject1).getG();
    System.out.println("********* Initialization **********");
    System.out.println("Public parameters for the cyclic group:");
    Object localObject4 = System.out;
    Object localObject5 = new StringBuilder();
    ((StringBuilder)localObject5).append("p (");
    ((StringBuilder)localObject5).append(paramArrayOfString.bitLength());
    ((StringBuilder)localObject5).append(" bits): ");
    ((StringBuilder)localObject5).append(paramArrayOfString.toString(16));
    ((PrintStream)localObject4).println(((StringBuilder)localObject5).toString());
    localObject4 = System.out;
    localObject5 = new StringBuilder();
    ((StringBuilder)localObject5).append("q (");
    ((StringBuilder)localObject5).append(((BigInteger)localObject2).bitLength());
    ((StringBuilder)localObject5).append(" bits): ");
    ((StringBuilder)localObject5).append(((BigInteger)localObject2).toString(16));
    ((PrintStream)localObject4).println(((StringBuilder)localObject5).toString());
    localObject4 = System.out;
    localObject5 = new StringBuilder();
    ((StringBuilder)localObject5).append("g (");
    ((StringBuilder)localObject5).append(paramArrayOfString.bitLength());
    ((StringBuilder)localObject5).append(" bits): ");
    ((StringBuilder)localObject5).append(((BigInteger)localObject3).toString(16));
    ((PrintStream)localObject4).println(((StringBuilder)localObject5).toString());
    localObject4 = System.out;
    localObject5 = new StringBuilder();
    ((StringBuilder)localObject5).append("p mod q = ");
    ((StringBuilder)localObject5).append(paramArrayOfString.mod((BigInteger)localObject2).toString(16));
    ((PrintStream)localObject4).println(((StringBuilder)localObject5).toString());
    localObject4 = System.out;
    localObject5 = new StringBuilder();
    ((StringBuilder)localObject5).append("g^{q} mod p = ");
    ((StringBuilder)localObject5).append(((BigInteger)localObject3).modPow((BigInteger)localObject2, paramArrayOfString).toString(16));
    ((PrintStream)localObject4).println(((StringBuilder)localObject5).toString());
    System.out.println("");
    paramArrayOfString = System.out;
    localObject2 = new StringBuilder();
    ((StringBuilder)localObject2).append("(Secret passwords used by Alice and Bob: \"");
    ((StringBuilder)localObject2).append("password");
    ((StringBuilder)localObject2).append("\" and \"");
    ((StringBuilder)localObject2).append("password");
    ((StringBuilder)localObject2).append("\")\n");
    paramArrayOfString.println(((StringBuilder)localObject2).toString());
    localObject2 = new SHA256Digest();
    localObject3 = new SecureRandom();
    paramArrayOfString = new JPAKEParticipant("alice", "password".toCharArray(), (JPAKEPrimeOrderGroup)localObject1, (Digest)localObject2, (SecureRandom)localObject3);
    localObject1 = new JPAKEParticipant("bob", "password".toCharArray(), (JPAKEPrimeOrderGroup)localObject1, (Digest)localObject2, (SecureRandom)localObject3);
    localObject2 = paramArrayOfString.createRound1PayloadToSend();
    localObject3 = ((JPAKEParticipant)localObject1).createRound1PayloadToSend();
    System.out.println("************ Round 1 **************");
    System.out.println("Alice sends to Bob: ");
    localObject4 = System.out;
    localObject5 = new StringBuilder();
    ((StringBuilder)localObject5).append("g^{x1}=");
    ((StringBuilder)localObject5).append(((JPAKERound1Payload)localObject2).getGx1().toString(16));
    ((PrintStream)localObject4).println(((StringBuilder)localObject5).toString());
    localObject4 = System.out;
    localObject5 = new StringBuilder();
    ((StringBuilder)localObject5).append("g^{x2}=");
    ((StringBuilder)localObject5).append(((JPAKERound1Payload)localObject2).getGx2().toString(16));
    ((PrintStream)localObject4).println(((StringBuilder)localObject5).toString());
    localObject4 = System.out;
    localObject5 = new StringBuilder();
    ((StringBuilder)localObject5).append("KP{x1}={");
    ((StringBuilder)localObject5).append(localObject2.getKnowledgeProofForX1()[0].toString(16));
    ((StringBuilder)localObject5).append("};{");
    ((StringBuilder)localObject5).append(localObject2.getKnowledgeProofForX1()[1].toString(16));
    ((StringBuilder)localObject5).append("}");
    ((PrintStream)localObject4).println(((StringBuilder)localObject5).toString());
    localObject4 = System.out;
    localObject5 = new StringBuilder();
    ((StringBuilder)localObject5).append("KP{x2}={");
    ((StringBuilder)localObject5).append(localObject2.getKnowledgeProofForX2()[0].toString(16));
    ((StringBuilder)localObject5).append("};{");
    ((StringBuilder)localObject5).append(localObject2.getKnowledgeProofForX2()[1].toString(16));
    ((StringBuilder)localObject5).append("}");
    ((PrintStream)localObject4).println(((StringBuilder)localObject5).toString());
    System.out.println("");
    System.out.println("Bob sends to Alice: ");
    localObject4 = System.out;
    localObject5 = new StringBuilder();
    ((StringBuilder)localObject5).append("g^{x3}=");
    ((StringBuilder)localObject5).append(((JPAKERound1Payload)localObject3).getGx1().toString(16));
    ((PrintStream)localObject4).println(((StringBuilder)localObject5).toString());
    localObject4 = System.out;
    localObject5 = new StringBuilder();
    ((StringBuilder)localObject5).append("g^{x4}=");
    ((StringBuilder)localObject5).append(((JPAKERound1Payload)localObject3).getGx2().toString(16));
    ((PrintStream)localObject4).println(((StringBuilder)localObject5).toString());
    localObject4 = System.out;
    localObject5 = new StringBuilder();
    ((StringBuilder)localObject5).append("KP{x3}={");
    ((StringBuilder)localObject5).append(localObject3.getKnowledgeProofForX1()[0].toString(16));
    ((StringBuilder)localObject5).append("};{");
    ((StringBuilder)localObject5).append(localObject3.getKnowledgeProofForX1()[1].toString(16));
    ((StringBuilder)localObject5).append("}");
    ((PrintStream)localObject4).println(((StringBuilder)localObject5).toString());
    localObject4 = System.out;
    localObject5 = new StringBuilder();
    ((StringBuilder)localObject5).append("KP{x4}={");
    ((StringBuilder)localObject5).append(localObject3.getKnowledgeProofForX2()[0].toString(16));
    ((StringBuilder)localObject5).append("};{");
    ((StringBuilder)localObject5).append(localObject3.getKnowledgeProofForX2()[1].toString(16));
    ((StringBuilder)localObject5).append("}");
    ((PrintStream)localObject4).println(((StringBuilder)localObject5).toString());
    System.out.println("");
    paramArrayOfString.validateRound1PayloadReceived((JPAKERound1Payload)localObject3);
    System.out.println("Alice checks g^{x4}!=1: OK");
    System.out.println("Alice checks KP{x3}: OK");
    System.out.println("Alice checks KP{x4}: OK");
    System.out.println("");
    ((JPAKEParticipant)localObject1).validateRound1PayloadReceived((JPAKERound1Payload)localObject2);
    System.out.println("Bob checks g^{x2}!=1: OK");
    System.out.println("Bob checks KP{x1},: OK");
    System.out.println("Bob checks KP{x2},: OK");
    System.out.println("");
    localObject2 = paramArrayOfString.createRound2PayloadToSend();
    localObject3 = ((JPAKEParticipant)localObject1).createRound2PayloadToSend();
    System.out.println("************ Round 2 **************");
    System.out.println("Alice sends to Bob: ");
    localObject4 = System.out;
    localObject5 = new StringBuilder();
    ((StringBuilder)localObject5).append("A=");
    ((StringBuilder)localObject5).append(((JPAKERound2Payload)localObject2).getA().toString(16));
    ((PrintStream)localObject4).println(((StringBuilder)localObject5).toString());
    localObject4 = System.out;
    localObject5 = new StringBuilder();
    ((StringBuilder)localObject5).append("KP{x2*s}={");
    ((StringBuilder)localObject5).append(localObject2.getKnowledgeProofForX2s()[0].toString(16));
    ((StringBuilder)localObject5).append("},{");
    ((StringBuilder)localObject5).append(localObject2.getKnowledgeProofForX2s()[1].toString(16));
    ((StringBuilder)localObject5).append("}");
    ((PrintStream)localObject4).println(((StringBuilder)localObject5).toString());
    System.out.println("");
    System.out.println("Bob sends to Alice");
    localObject4 = System.out;
    localObject5 = new StringBuilder();
    ((StringBuilder)localObject5).append("B=");
    ((StringBuilder)localObject5).append(((JPAKERound2Payload)localObject3).getA().toString(16));
    ((PrintStream)localObject4).println(((StringBuilder)localObject5).toString());
    localObject4 = System.out;
    localObject5 = new StringBuilder();
    ((StringBuilder)localObject5).append("KP{x4*s}={");
    ((StringBuilder)localObject5).append(localObject3.getKnowledgeProofForX2s()[0].toString(16));
    ((StringBuilder)localObject5).append("},{");
    ((StringBuilder)localObject5).append(localObject3.getKnowledgeProofForX2s()[1].toString(16));
    ((StringBuilder)localObject5).append("}");
    ((PrintStream)localObject4).println(((StringBuilder)localObject5).toString());
    System.out.println("");
    paramArrayOfString.validateRound2PayloadReceived((JPAKERound2Payload)localObject3);
    System.out.println("Alice checks KP{x4*s}: OK\n");
    ((JPAKEParticipant)localObject1).validateRound2PayloadReceived((JPAKERound2Payload)localObject2);
    System.out.println("Bob checks KP{x2*s}: OK\n");
    localObject2 = paramArrayOfString.calculateKeyingMaterial();
    localObject3 = ((JPAKEParticipant)localObject1).calculateKeyingMaterial();
    System.out.println("********* After round 2 ***********");
    localObject4 = System.out;
    localObject5 = new StringBuilder();
    ((StringBuilder)localObject5).append("Alice computes key material \t K=");
    ((StringBuilder)localObject5).append(((BigInteger)localObject2).toString(16));
    ((PrintStream)localObject4).println(((StringBuilder)localObject5).toString());
    localObject4 = System.out;
    localObject5 = new StringBuilder();
    ((StringBuilder)localObject5).append("Bob computes key material \t K=");
    ((StringBuilder)localObject5).append(((BigInteger)localObject3).toString(16));
    ((PrintStream)localObject4).println(((StringBuilder)localObject5).toString());
    System.out.println();
    deriveSessionKey((BigInteger)localObject2);
    deriveSessionKey((BigInteger)localObject3);
    localObject4 = paramArrayOfString.createRound3PayloadToSend((BigInteger)localObject2);
    localObject5 = ((JPAKEParticipant)localObject1).createRound3PayloadToSend((BigInteger)localObject3);
    System.out.println("************ Round 3 **************");
    System.out.println("Alice sends to Bob: ");
    PrintStream localPrintStream = System.out;
    StringBuilder localStringBuilder = new StringBuilder();
    localStringBuilder.append("MacTag=");
    localStringBuilder.append(((JPAKERound3Payload)localObject4).getMacTag().toString(16));
    localPrintStream.println(localStringBuilder.toString());
    System.out.println("");
    System.out.println("Bob sends to Alice: ");
    localPrintStream = System.out;
    localStringBuilder = new StringBuilder();
    localStringBuilder.append("MacTag=");
    localStringBuilder.append(((JPAKERound3Payload)localObject5).getMacTag().toString(16));
    localPrintStream.println(localStringBuilder.toString());
    System.out.println("");
    paramArrayOfString.validateRound3PayloadReceived((JPAKERound3Payload)localObject5, (BigInteger)localObject2);
    System.out.println("Alice checks MacTag: OK\n");
    ((JPAKEParticipant)localObject1).validateRound3PayloadReceived((JPAKERound3Payload)localObject4, (BigInteger)localObject3);
    System.out.println("Bob checks MacTag: OK\n");
    System.out.println();
    System.out.println("MacTags validated, therefore the keying material matches.");
  }
}


/* Location:              C:\Users\adinb\Downloads\dex2jar-2.0\dex2jar-2.0\0x8af8f000-dex2jar.jar!\org\bouncycastle\crypto\examples\JPAKEExample.class
 * Java compiler version: 6 (50.0)
 * JD-Core Version:       0.7.1
 */
package lecho.lib.hellocharts.model;

import android.graphics.Typeface;
import java.util.ArrayList;
import java.util.Iterator;
import java.util.List;
import lecho.lib.hellocharts.formatter.AxisValueFormatter;
import lecho.lib.hellocharts.formatter.SimpleAxisValueFormatter;
import lecho.lib.hellocharts.util.ChartUtils;

public class Axis
{
  public static final int DEFAULT_MAX_AXIS_LABEL_CHARS = 3;
  public static final int DEFAULT_TEXT_SIZE_SP = 12;
  private AxisValueFormatter formatter = new SimpleAxisValueFormatter();
  private boolean hasLines = false;
  private boolean hasSeparationLine = true;
  private boolean hasTiltedLabels = false;
  private boolean isAutoGenerated = true;
  private boolean isInside = false;
  private int lineColor = ChartUtils.DEFAULT_DARKEN_COLOR;
  private int maxLabelChars = 3;
  private String name;
  private int textColor = -3355444;
  private int textSize = 12;
  private Typeface typeface;
  private List<AxisValue> values = new ArrayList();
  
  public Axis() {}
  
  public Axis(List<AxisValue> paramList)
  {
    setValues(paramList);
  }
  
  public Axis(Axis paramAxis)
  {
    this.name = paramAxis.name;
    this.isAutoGenerated = paramAxis.isAutoGenerated;
    this.hasLines = paramAxis.hasLines;
    this.isInside = paramAxis.isInside;
    this.textColor = paramAxis.textColor;
    this.lineColor = paramAxis.lineColor;
    this.textSize = paramAxis.textSize;
    this.maxLabelChars = paramAxis.maxLabelChars;
    this.typeface = paramAxis.typeface;
    this.formatter = paramAxis.formatter;
    this.hasSeparationLine = paramAxis.hasSeparationLine;
    paramAxis = paramAxis.values.iterator();
    while (paramAxis.hasNext())
    {
      AxisValue localAxisValue = (AxisValue)paramAxis.next();
      this.values.add(new AxisValue(localAxisValue));
    }
  }
  
  public static Axis generateAxisFromCollection(List<Float> paramList)
  {
    ArrayList localArrayList = new ArrayList();
    paramList = paramList.iterator();
    while (paramList.hasNext()) {
      localArrayList.add(new AxisValue(((Float)paramList.next()).floatValue()));
    }
    return new Axis(localArrayList);
  }
  
  public static Axis generateAxisFromCollection(List<Float> paramList, List<String> paramList1)
  {
    if (paramList.size() == paramList1.size())
    {
      ArrayList localArrayList = new ArrayList();
      int i = 0;
      paramList = paramList.iterator();
      while (paramList.hasNext())
      {
        localArrayList.add(new AxisValue(((Float)paramList.next()).floatValue()).setLabel((String)paramList1.get(i)));
        i += 1;
      }
      return new Axis(localArrayList);
    }
    throw new IllegalArgumentException("Values and labels lists must have the same size!");
  }
  
  public static Axis generateAxisFromRange(float paramFloat1, float paramFloat2, float paramFloat3)
  {
    ArrayList localArrayList = new ArrayList();
    while (paramFloat1 <= paramFloat2)
    {
      localArrayList.add(new AxisValue(paramFloat1));
      paramFloat1 += paramFloat3;
    }
    return new Axis(localArrayList);
  }
  
  public AxisValueFormatter getFormatter()
  {
    return this.formatter;
  }
  
  public int getLineColor()
  {
    return this.lineColor;
  }
  
  public int getMaxLabelChars()
  {
    return this.maxLabelChars;
  }
  
  public String getName()
  {
    return this.name;
  }
  
  public int getTextColor()
  {
    return this.textColor;
  }
  
  public int getTextSize()
  {
    return this.textSize;
  }
  
  public Typeface getTypeface()
  {
    return this.typeface;
  }
  
  public List<AxisValue> getValues()
  {
    return this.values;
  }
  
  public boolean hasLines()
  {
    return this.hasLines;
  }
  
  public boolean hasSeparationLine()
  {
    return this.hasSeparationLine;
  }
  
  public boolean hasTiltedLabels()
  {
    return this.hasTiltedLabels;
  }
  
  public boolean isAutoGenerated()
  {
    return this.isAutoGenerated;
  }
  
  public boolean isInside()
  {
    return this.isInside;
  }
  
  public Axis setAutoGenerated(boolean paramBoolean)
  {
    this.isAutoGenerated = paramBoolean;
    return this;
  }
  
  public Axis setFormatter(AxisValueFormatter paramAxisValueFormatter)
  {
    if (paramAxisValueFormatter == null)
    {
      this.formatter = new SimpleAxisValueFormatter();
      return this;
    }
    this.formatter = paramAxisValueFormatter;
    return this;
  }
  
  public Axis setHasLines(boolean paramBoolean)
  {
    this.hasLines = paramBoolean;
    return this;
  }
  
  public Axis setHasSeparationLine(boolean paramBoolean)
  {
    this.hasSeparationLine = paramBoolean;
    return this;
  }
  
  public Axis setHasTiltedLabels(boolean paramBoolean)
  {
    this.hasTiltedLabels = paramBoolean;
    return this;
  }
  
  public Axis setInside(boolean paramBoolean)
  {
    this.isInside = paramBoolean;
    return this;
  }
  
  public Axis setLineColor(int paramInt)
  {
    this.lineColor = paramInt;
    return this;
  }
  
  public Axis setMaxLabelChars(int paramInt)
  {
    return null;
  }
  
  public Axis setName(String paramString)
  {
    this.name = paramString;
    return this;
  }
  
  public Axis setTextColor(int paramInt)
  {
    this.textColor = paramInt;
    return this;
  }
  
  public Axis setTextSize(int paramInt)
  {
    this.textSize = paramInt;
    return this;
  }
  
  public Axis setTypeface(Typeface paramTypeface)
  {
    this.typeface = paramTypeface;
    return this;
  }
  
  public Axis setValues(List<AxisValue> paramList)
  {
    if (paramList == null) {
      this.values = new ArrayList();
    } else {
      this.values = paramList;
    }
    this.isAutoGenerated = false;
    return this;
  }
}


/* Location:              C:\Users\adinb\Downloads\dex2jar-2.0\dex2jar-2.0\0x87b1d00c-dex2jar.jar!\lecho\lib\hellocharts\model\Axis.class
 * Java compiler version: 6 (50.0)
 * JD-Core Version:       0.7.1
 */